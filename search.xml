<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 4.4KK 源码编译</title>
    <url>/2019/03/13/Android-4.4KK-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><div class="note "><ul>
<li>操作系统：👍🏻 Ubuntu 19.10 (Eoan Ermine)<br>下载地址：<a href="http://releases.ubuntu.com/19.10/">http://releases.ubuntu.com/19.10/</a></li>
<li>JDK： 1.6.0_45<br>￼下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html">https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html</a></li>
</ul>
</div>
<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p> 1.安装JDK<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/local/jdk </span><br><span class="line">￼sudo cp /home/XXXX/Downloads/jdk-6u45-linux-x64.bin /usr/local/jdk</span><br><span class="line">￼cd /usr/local/jdk</span><br><span class="line">￼sudo chmod +x jdk-6u45-linux-x64.bin</span><br><span class="line">￼sudo ./jdk-6u45-linux-x64.bin</span><br></pre></td></tr></table></figure><br>2.配置环境变量<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/profile #打开配置文件,末尾添加</span><br><span class="line">export JAVA_HOME=/usr/local/jdk/jdk1.6.0_45</span><br><span class="line">export JRE_HOME=/usr/local/jdk/jdk1.6.0_45/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$JAVA_HOME:$PATH</span><br></pre></td></tr></table></figure></p>
<h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在sources.list末尾添加(用于安装mingw32)</span></span><br><span class="line">deb http://us.archive.ubuntu.com/ubuntu trusty main universe</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在sources.list末尾添加(用于安装libesd0-dev)，保存</span></span><br><span class="line">deb http://archive.ubuntu.com/ubuntu/ trusty main universe restricted multiverse</span><br><span class="line">sudo apt-get update</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib </span><br><span class="line">sudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 </span><br><span class="line">sudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 </span><br><span class="line">sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev</span><br><span class="line">sudo apt-get install git-core gnupg flex bison gperf build-essential  </span><br><span class="line">sudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib </span><br><span class="line">sudo apt-get install libc6-dev-i386 </span><br><span class="line">sudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev </span><br><span class="line">sudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4</span><br><span class="line">sudo apt-get install lib32z-dev ccache</span><br></pre></td></tr></table></figure>
<p><a href="/documents/install.sh">脚本</a><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod a+x ./install.sh</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></p>
<h3 id="gcc-g"><a href="#gcc-g" class="headerlink" title="gcc | g++"></a>gcc | g++</h3><p>￼1.降级gcc g++<br>     apt-get install gcc-4.4<br>     apt-get install g++-4.4<br>2.gcc|g++ 链接到4.4版本,指令：<br>    <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l g++*</span><br><span class="line">sudo mv g++ g++.bak</span><br><span class="line">sudo ln -s g++-4.4 g++</span><br><span class="line">ls -l gcc*</span><br><span class="line">sudo mv gcc gcc.bak</span><br><span class="line">sudo ln -s gcc-4.4 gcc </span><br><span class="line">gcc -v</span><br><span class="line">g++ -v</span><br></pre></td></tr></table></figure></p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 到项目根目录</span><br><span class="line">source build/envsetup.sh  |  source XXXX/envsetup.sh</span><br><span class="line">选择编译项目</span><br><span class="line">kheader</span><br><span class="line">make -j8</span><br><span class="line">./XXXX/CopyImages.sh -p #打包</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles 抓 Https</title>
    <url>/2019/04/26/Charles-%E6%8A%93-Https/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><ul>
<li><h3 id="Charles-配置证书"><a href="#Charles-配置证书" class="headerlink" title="Charles 配置证书"></a>Charles 配置证书</h3><p><img src="/images/11556265698_.pic_hd.jpg" alt="image.png"><br>钥匙串同意证书<br><img src="/images/21556265734_.pic_hd.jpg" alt="image.png"></p>
</li>
<li><h3 id="手机端安装证书"><a href="#手机端安装证书" class="headerlink" title="手机端安装证书"></a>手机端安装证书</h3><p><img src="/images/41556265929_.pic_hd.jpg" alt="image.png"><br><img src="/images/31556265889_.pic_hd.jpg" alt="image.png"><br>手机依图设置好代理并安装证书</p>
</li>
<li><h3 id="手机端安装证书-1"><a href="#手机端安装证书-1" class="headerlink" title="手机端安装证书"></a>手机端安装证书</h3><img src="/images/51556266514_.pic_hd.jpg" alt="image.png"><br><img src="/images/61556266572_.pic_hd.jpg" alt="image.png"><br>点击SSL Proxying Settings，Host填写要抓取的ip或域名，port默认填写443</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Flutter</title>
    <url>/2018/11/20/Flutter/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a><a href="flutter.io">Flutter</a></h3><blockquote><p><a href="https://flutterchina.club/">Flutter中文网</a></p>
</blockquote>
<p>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。</p>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><pre><code>1.下载最新压缩包 https://github.com/flutter/flutter/releases;
2.解压到指定目录;
3.配置环境变量;
4.验证.[执行 flutter doctor，并安装相应平台全部缺失toolchain]
</code></pre>]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CocoaPods</title>
    <url>/2018/10/22/CocoaPods/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>CocoaPods是Swift和Objective-C Cocoa项目的依赖管理器。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>切换源<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br><span class="line">gem sources -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> 确保只有 gems.ruby-china.com&#123;%endnote%&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>更新 RubyGems<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gem update --system # 这里请翻墙一下</span><br></pre></td></tr></table></figure></li>
<li>安装 CocoPods<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br></pre></td></tr></table></figure></li>
<li>设置仓库<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Pods</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 批量修改</title>
    <url>/2019/03/27/Git-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git filter-branch -f --env-filter &#x27;</span><br><span class="line">OLD_EMAIL=&quot;hexyz@Hexyz.local&quot;</span><br><span class="line">CORRECT_NAME=&quot;Hexyz&quot;</span><br><span class="line">CORRECT_EMAIL=&quot;hi@hexyz.cn&quot;</span><br><span class="line">if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span><br><span class="line">then</span><br><span class="line">export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;</span><br><span class="line">export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;</span><br><span class="line">fi</span><br><span class="line">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span><br><span class="line">then</span><br><span class="line">export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;</span><br><span class="line">export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;</span><br><span class="line">fi</span><br><span class="line">&#x27; --tag-name-filter cat -- --branches --tags</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 创建个人Blog</title>
    <url>/2019/03/27/Hexo-%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><ul>
<li><h2 id="官方资料"><a href="#官方资料" class="headerlink" title="官方资料"></a><a href="https://hexo.io/zh-cn/">官方资料</a></h2></li>
<li><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn upgrade</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn global add hexo-cli</span></span><br></pre></td></tr></table></figure></li>
<li><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add hexo --save</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g <span class="comment">#生成静态文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s --debug <span class="comment">#启动服务</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash">部署</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add hexo-deployer-git <span class="comment">#安装部署工具</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deployer</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Homebrew</title>
    <url>/2018/10/18/Homebrew/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><blockquote><h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h1></blockquote>
<p>macOS 缺失的软件包的管理器</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Homebrew也称brew，macOS下基于命令行的最强大软件包管理工具，使用Ruby语言开发。类似于CentOS的yum或者Ubuntu的apt-get，brew能方便的管理软件的安装、更新、卸载，省去了手动编译或拖动安装的不便，更使得软件的管理更加集中化，解决了依赖包管理的烦恼。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>终端输入以下命令，等待其执行完毕。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><ul>
<li>brew help //查看帮助</li>
<li>brew install … //安装软件包</li>
<li>brew uninstall … //卸载软件包</li>
<li>brew list [–versions] //列出已安装的软件包(包括版本)</li>
<li>brew search … //查找软件包</li>
<li>brew info … //查看软件包信息</li>
<li>brew update //更新brew</li>
<li>brew outdated //列出过时的软件包（已安装但不是最新版本）</li>
<li>brew upgrade […] //更新过时的软件包（不指定软件包表示更新全部）</li>
<li>brew doctor //检查brew运行状态</li>
</ul>
<blockquote><h1 id="Homebrew-Cask"><a href="#Homebrew-Cask" class="headerlink" title="Homebrew Cask"></a>Homebrew Cask</h1></blockquote>
<p>Homebrew Cask 是 Homebrew 的扩展，借助它可以方便地在 macOS 上安装图形界面程序，即我们常用的各类应用。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew cask install ...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category></category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 删除自带ABC输入法</title>
    <url>/2018/12/24/Mac-%E5%88%A0%E9%99%A4%E8%87%AA%E5%B8%A6ABC%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><!-- 使用 MetingJS 插入歌曲列表 -->

    <div id="aplayer-EahCzlTX" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="001YVedc0AHGbf" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<h3 id="关闭系统-SIP"><a href="#关闭系统-SIP" class="headerlink" title="关闭系统 SIP"></a>关闭系统 SIP</h3><div class="note "><p>OS X El Capitan 开始，苹果桌面操作系统为 Mac 电脑提供一个被称作系统完整性保护（System Integrity Protection，SIP）的功能。该功能被设计通过限制根用户账号的权限以及防止未经授权对受保护的文件和文件夹进行访问等措施让用户的 Mac 电脑免于恶意软件的攻击。</p>
</div>
<ul>
<li>查看 SIP 状态<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">csrutil status</span><br></pre></td></tr></table></figure></li>
<li>关闭 SIP</li>
</ul>
<ol>
<li>重启Mac，按住 ⌘+R 直到屏幕上出现苹果的标志和进度条，进入 Recovery 模式；</li>
<li>在屏幕最上方的工具栏找到实用工具，打开终端，输入：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">csrutil disable</span><br></pre></td></tr></table></figure></li>
<li>关掉终端，重启mac；</li>
</ol>
<ul>
<li>开启 SIP<br>与关闭SIP类似。只需换掉第2步命令 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">csrutil enable</span><br></pre></td></tr></table></figure>
<h3 id="关闭自带-ABC-输入法"><a href="#关闭自带-ABC-输入法" class="headerlink" title="关闭自带 ABC 输入法"></a>关闭自带 ABC 输入法</h3></li>
<li>执行以下命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo open ~/Library/Preferences/com.apple.HIToolbox.plist</span><br></pre></td></tr></table></figure></li>
<li>输入密码即可打开 com.apple.HIToolbox.plist 文件。（请先安装 Xcode 或者 PlistEdit Pro ）</li>
<li>打开 Root - AppleEnabledInputSources（如图），删除所有含有 ABC 的 Item，⌘+s保存退出。<br><img src="/images/image1.png" alt="image.png"></li>
<li>重启电脑即可。</li>
</ul>
<hr>
<div class="note danger"><p>如果想要用回自带输入法，在 偏好设置 - 键盘 - 输入法 里，按 + 号，添加即可。</p>
</div>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 关闭端口</title>
    <url>/2019/06/21/Mac-%E5%85%B3%E9%97%AD%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><ul>
<li>执行命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:端口</span><br></pre></td></tr></table></figure></li>
<li>返回类似结果<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">COMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">main    99710 hexyz    7u  IPv6 0xf1382abd7ac26d49      0t0  TCP *:glrpc (LISTEN)</span><br></pre></td></tr></table></figure></li>
<li>再次执行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 99710</span><br></pre></td></tr></table></figure></li>
<li>End</li>
</ul>
]]></content>
      <categories>
        <category></category>
      </categories>
  </entry>
  <entry>
    <title>My Mac</title>
    <url>/2020/10/21/My-Mac/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="同意使用未知来源应用"><a href="#同意使用未知来源应用" class="headerlink" title="同意使用未知来源应用"></a>同意使用未知来源应用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>
<h2 id="安装-xcdoe-select"><a href="#安装-xcdoe-select" class="headerlink" title="安装 xcdoe-select"></a>安装 xcdoe-select</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>
<h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装  [ Homebrew ]"></a>安装  [ Homebrew ]</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line">brew install git </span><br></pre></td></tr></table></figure>
<h3 id="安装-iTerm2"><a href="#安装-iTerm2" class="headerlink" title="安装 iTerm2"></a>安装 iTerm2</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install iterm2</span><br></pre></td></tr></table></figure>
<h3 id="安装-FishShell"><a href="#安装-FishShell" class="headerlink" title="安装  FishShell"></a>安装  FishShell</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install fish</span><br><span class="line">cd etc/shells</span><br><span class="line">vim etc/shells</span><br><span class="line">add /usr/local/bin/fish</span><br><span class="line">chsh -s /usr/local/bin/fish   　　##切换至fish</span><br><span class="line">curl -L https://get.oh-my.fish | fish</span><br></pre></td></tr></table></figure>
<div class="note "><p>fish 全局配置文件路径</p>
<ul>
<li>/usr/local/etc/fish/config.fish   #brew 安装</li>
<li>~/.config/fish/config.fish</li>
</ul>
</div>
<h3 id="安装-CocoaPods"><a href="#安装-CocoaPods" class="headerlink" title="安装 CocoaPods"></a>安装 CocoaPods</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install cocoapods</span><br><span class="line"><span class="meta">#</span><span class="bash"> success</span></span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure>
<h3 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install git yarn go watchman httpie</span><br><span class="line">brew cask install android-studio visual-studio-code cheatsheet wechat blu-ray-player-pro 115browser </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category></category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>My Ubuntu</title>
    <url>/2019/03/13/My-Ubuntu/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="fish"><a href="#fish" class="headerlink" title="fish"></a>fish</h2><ul>
<li>安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:fish-shell/release-2</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install fish</span><br></pre></td></tr></table></figure></li>
<li>设置 shell 默认为 fish<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chsh -s /usr/bin/fish</span><br></pre></td></tr></table></figure></li>
<li>退出,重启终端</li>
</ul>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js</title>
    <url>/2018/11/05/NodeJS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><blockquote><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><a href="http://nodejs.cn/">Node.js</a></h1></blockquote>
<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。</p>
<blockquote><h1 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h1></blockquote>
<h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h3><p> node多版本管理和切换工具</p>
<ul>
<li>可安装多版本的node</li>
<li>灵活切换当前的node版本</li>
<li>以沙箱方式全局安装第三方组件到对应版本的node中</li>
<li>通过.vnmrc文件，方便灵活地指定各应用系统所需的node版本进行运行</li>
</ul>
<h3 id="Mac安装nvm（fish）"><a href="#Mac安装nvm（fish）" class="headerlink" title="Mac安装nvm（fish）"></a>Mac安装nvm（fish）</h3><ul>
<li>执行以下命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/creationix/nvm.git ~/.nvm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.nvm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ~/.nvm&gt; git checkout (git describe --abbrev=0 --tags)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.config/fish</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ~/.c/fish&gt; git <span class="built_in">clone</span> git://github.com/passcod/nvm-fish-wrapper.git nvm-wrapper</span></span><br></pre></td></tr></table></figure></li>
<li>在 config.fish 中添加如下代码  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.config&#x2F;fish&#x2F;nvm-wrapper&#x2F;nvm.fish</span><br></pre></td></tr></table></figure></li>
<li>检查是否安装成功，使用如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nvm --version</span><br></pre></td></tr></table></figure>
<h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3></li>
<li>查看可安装 node 版本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm  ls-remote</span><br></pre></td></tr></table></figure></li>
<li>安装当前最新的稳定版node<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure></li>
<li>安装指定版本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install v版本号</span><br></pre></td></tr></table></figure></li>
<li>查看已安装版本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure></li>
<li>查看当前使用node版本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm current</span><br></pre></td></tr></table></figure></li>
<li>使用指定版本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm use 版本</span><br></pre></td></tr></table></figure></li>
<li>卸载指定版本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm uninstall 版本</span><br></pre></td></tr></table></figure></li>
<li>设置默认版本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm alias default 版本</span><br></pre></td></tr></table></figure></li>
<li>取消默认版本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm alias default</span><br></pre></td></tr></table></figure>
<blockquote><h1 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h1></blockquote>
<h3 id="npm-简介（Node-Package-Manager）"><a href="#npm-简介（Node-Package-Manager）" class="headerlink" title="npm 简介（Node Package Manager）"></a>npm 简介（Node Package Manager）</h3>npm 是 Node.js 官方包管理工具，用于 Node.js 包的发布、传播、依赖控制。npm 提供了命令行工具，可以方便地下载、安装、升级、删除包，也可以作为开发者发布并维护包</li>
</ul>
<p>npm 是随同 Node.js 一起安装的包管理工具，能解决 Node.js 代码部署的诸多问题，常见的应用场景有：</p>
<ul>
<li>从 npm 服务器拉去别人第三方包到本地使用</li>
<li>从 npm 服务器下载并安装别人编写的命令行程序到本地使用</li>
<li>用户将自己编写的包或命令行程序上传到 npm 服务器供别人使用</li>
</ul>
]]></content>
      <tags>
        <tag>fish</tag>
        <tag>nvm</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn</title>
    <url>/2018/11/19/Yarn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="https://yarn.bootcss.com/">简介</a></h3><p>Facebook官方出品，用以替换npm。快速、可靠、安全的依赖管理。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install yarn</span><br></pre></td></tr></table></figure>
<h3 id="CLI「详细文档」"><a href="#CLI「详细文档」" class="headerlink" title="CLI「详细文档」"></a>CLI「<a href="https://yarnpkg.com/zh-Hans/docs/cli/">详细文档</a>」</h3><ul>
<li>yarn add：为当前正在开发的包新增一个依赖包；</li>
<li>yarn init：初始化包；</li>
<li>yarn install：安装package.json 文件里定义的所有依赖包；</li>
<li>yarn publish：发布一个包到包管理器；</li>
<li>yarn remove：从当前包里移除一个未使用的包。</li>
<li>yarn：等同于执行yarn install，并透传所有参数。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>CATransform3D</title>
    <url>/2020/12/23/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h3 id="CATransform3D-旋转-缩放-平移-动画-矩阵-绘制-图层-转换-形变"><a href="#CATransform3D-旋转-缩放-平移-动画-矩阵-绘制-图层-转换-形变" class="headerlink" title="CATransform3D 旋转 缩放 平移 动画 矩阵 绘制 图层 转换 形变"></a>CATransform3D 旋转 缩放 平移 动画 矩阵 绘制 图层 转换 形变</h3><ul>
<li>CATransform3D是QuartzCore下声明的一个结构体</li>
<li>它是用来对一个layer的内容进行旋转、缩放、平移、扭转变化的变形矩阵，它提供了一些创建、叠加和修改（layer的）CATransform3D数据的函数。</li>
<li>它以一个layer的锚点为准，将形变作用于此layer的范围内，默认是初始值。</li>
<li>Animatable意味着此属性可以作用于动画。<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># 平移</span><br><span class="line"><span class="keyword">let</span> transformTranslation = <span class="type">CATransform3DMakeTranslation</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">view.layer.transform = transformTranslation</span><br><span class="line"></span><br><span class="line"># 缩放</span><br><span class="line"><span class="keyword">let</span> transformSclae = <span class="type">CATransform3DMakeScale</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>)</span><br><span class="line">view.layer.transform = transformSclae</span><br><span class="line"></span><br><span class="line"># 旋转</span><br><span class="line"><span class="keyword">let</span> transformRotation = <span class="type">CATransform3DMakeRotation</span>(<span class="type">CGFloat</span>(<span class="type">M_PI_4</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">view.layer.transform = transformRotation</span><br><span class="line"></span><br><span class="line"># 叠加</span><br><span class="line"><span class="keyword">let</span> transformTranslation = <span class="type">CATransform3DMakeTranslation</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> transformSclae = <span class="type">CATransform3DMakeScale</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> transformConcat = <span class="type">CATransform3DConcat</span>(transformTranslation, transformSclae)</span><br><span class="line">        </span><br><span class="line">view.layer.transform = transformConcat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 反转</span><br><span class="line"><span class="keyword">let</span> transformSclae = <span class="type">CATransform3DMakeScale</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> transformInvert = <span class="type">CATransform3DInvert</span>(transformSclae)</span><br><span class="line"></span><br><span class="line">view.layer.transform = transformInvert</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
</search>
